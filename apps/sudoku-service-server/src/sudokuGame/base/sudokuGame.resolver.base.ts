/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SudokuGame } from "./SudokuGame";
import { SudokuGameCountArgs } from "./SudokuGameCountArgs";
import { SudokuGameFindManyArgs } from "./SudokuGameFindManyArgs";
import { SudokuGameFindUniqueArgs } from "./SudokuGameFindUniqueArgs";
import { CreateSudokuGameArgs } from "./CreateSudokuGameArgs";
import { UpdateSudokuGameArgs } from "./UpdateSudokuGameArgs";
import { DeleteSudokuGameArgs } from "./DeleteSudokuGameArgs";
import { User } from "../../user/base/User";
import { SudokuGameService } from "../sudokuGame.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SudokuGame)
export class SudokuGameResolverBase {
  constructor(
    protected readonly service: SudokuGameService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SudokuGame",
    action: "read",
    possession: "any",
  })
  async _sudokuGamesMeta(
    @graphql.Args() args: SudokuGameCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SudokuGame])
  @nestAccessControl.UseRoles({
    resource: "SudokuGame",
    action: "read",
    possession: "any",
  })
  async sudokuGames(
    @graphql.Args() args: SudokuGameFindManyArgs
  ): Promise<SudokuGame[]> {
    return this.service.sudokuGames(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SudokuGame, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SudokuGame",
    action: "read",
    possession: "own",
  })
  async sudokuGame(
    @graphql.Args() args: SudokuGameFindUniqueArgs
  ): Promise<SudokuGame | null> {
    const result = await this.service.sudokuGame(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SudokuGame)
  @nestAccessControl.UseRoles({
    resource: "SudokuGame",
    action: "create",
    possession: "any",
  })
  async createSudokuGame(
    @graphql.Args() args: CreateSudokuGameArgs
  ): Promise<SudokuGame> {
    return await this.service.createSudokuGame({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SudokuGame)
  @nestAccessControl.UseRoles({
    resource: "SudokuGame",
    action: "update",
    possession: "any",
  })
  async updateSudokuGame(
    @graphql.Args() args: UpdateSudokuGameArgs
  ): Promise<SudokuGame | null> {
    try {
      return await this.service.updateSudokuGame({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SudokuGame)
  @nestAccessControl.UseRoles({
    resource: "SudokuGame",
    action: "delete",
    possession: "any",
  })
  async deleteSudokuGame(
    @graphql.Args() args: DeleteSudokuGameArgs
  ): Promise<SudokuGame | null> {
    try {
      return await this.service.deleteSudokuGame(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: SudokuGame): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
